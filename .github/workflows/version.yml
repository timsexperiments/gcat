name: Version Bump

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled, closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select the release type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: "Select a pre-release label if needed"
        required: false
        type: choice
        options:
          - alpha
          - beta

jobs:
  calculate-version:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.calc.outputs.new_version }}
      old_version: ${{ steps.calc.outputs.old_version }}
      release_type: ${{ steps.determine.outputs.release_type }}
      prerelease: ${{ steps.determine.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine Release Parameters
        id: determine
        run: |
          RELEASE_TYPE=""
          PRERELEASE=""

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              RELEASE_TYPE="${{ github.event.inputs.release_type }}"
              PRERELEASE="${{ github.event.inputs.prerelease }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "Examining PR labels..."
              for label in $(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name'); do
                  lower_label=$(echo "$label" | tr '[:upper:]' '[:lower:]')
                  case "$lower_label" in
                      major|minor|patch)
                          RELEASE_TYPE="$lower_label"
                          ;;
                      alpha|beta)
                          PRERELEASE="$lower_label"
                          ;;
                  esac
              done
          else
              echo "Unsupported event type: ${{ github.event_name }}"
              exit 1
          fi

          echo "Determined release_type: $RELEASE_TYPE"
          echo "Determined prerelease: $PRERELEASE"
          echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Calculate New Version
        id: calc
        if: ${{ steps.determine.outputs.release_type != '' }}
        run: |
          OLD_VERSION=$(git tag -l 'v*' | sort -V | tail -n 1 || echo "")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT

          NEW_VERSION=$(./scripts/bump_version.sh "${{ steps.determine.outputs.release_type }}" "${{ steps.determine.outputs.prerelease }}" || echo "")
          if [ -z "$NEW_VERSION" ]; then
            echo "Failed to calculate new version" >&2
            exit 1
          fi

          if [ -n "$OLD_VERSION" ]; then
            echo "bumping from $OLD_VERSION to $NEW_VERSION" >&2
          else
            echo "setting version to $NEW_VERSION" >&2
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update PR with version info
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const releaseType = '${{ steps.determine.outputs.release_type }}';
            const prerelease = '${{ steps.determine.outputs.prerelease }}';
            const oldVersion = '${{ steps.calc.outputs.old_version }}';
            const newVersion = '${{ steps.calc.outputs.new_version }}';

            // Function to find existing bot comment
            async function findBotComment() {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
              });
              
              return comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('<!-- VERSION-BOT -->')
              );
            }

            let message = '<!-- VERSION-BOT -->\n';

            if (!releaseType) {
              message += '⚠️ **Warning:** No version bump label was detected on this PR. If you intended to trigger a release, please add one of the following labels: `major`, `minor`, or `patch`.';
            } else {
              const versionTypeText = prerelease ? `${releaseType} (${prerelease})` : releaseType;
              message += `✅ **Version Bump Detected**: \`${versionTypeText}\`\n\n`;
              
              if (oldVersion) {
                message += `This PR will bump the version from \`${oldVersion}\` to \`${newVersion}\` when merged.`;
              } else {
                message += `This PR will set the initial version to \`${newVersion}\` when merged.`;
              }
            }

            // Find existing comment to update
            const existingComment = await findBotComment();

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }

  bump-version:
    needs: calculate-version
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.state == 'closed')) && needs.calculate-version.outputs.release_type != '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "gcat CI"
          git config user.email "ci@timsexperiments.foo"

      - name: Create Version Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const { NEW_VERSION } = process.env;
            console.log(`Creating tag: ${NEW_VERSION}`);

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${NEW_VERSION}`,
              sha: context.sha
            });

            console.log(`Successfully created tag ${NEW_VERSION}`);
        env:
          NEW_VERSION: ${{ needs.calculate-version.outputs.new_version }}
